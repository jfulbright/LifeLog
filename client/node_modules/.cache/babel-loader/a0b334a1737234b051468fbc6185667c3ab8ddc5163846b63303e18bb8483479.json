{"ast":null,"code":"var _jsxFileName = \"/Users/jfulbright/bootcamp/Projects/LifeLog/client/src/features/cars/components/CarList.js\",\n  _s = $RefreshSig$();\n// client/src/features/cars/CarList.js\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport CarForm from \"features/cars/components/CarForm\";\nimport ItemCardList from \"components/shared/ItemCardList\";\nimport ItemExtras from \"components/shared/ItemExtras\";\nimport carSchema from \"features/cars/carSchema\";\n\n// Helpers to manage status filter logic across all categories\nimport { getStatusFilterOptions, filterByStatus, getStatusLabel } from \"helpers/filterUtils\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction CarList() {\n  _s();\n  // Retrieve saved cars from localStorage on load\n  const [cars, setCars] = useState(() => {\n    const saved = localStorage.getItem(\"cars\");\n    return saved ? JSON.parse(saved) : [];\n  });\n\n  // Form data state (used for both adding and editing)\n  const [formData, setFormData] = useState({});\n\n  // Toggles whether the form is visible\n  const [showForm, setShowForm] = useState(false);\n\n  // Tracks which item (by index) is being edited, if any\n  const [editIndex, setEditIndex] = useState(null);\n\n  // Tracks selected filter status (\"all\", \"owned\", \"wishlist\", etc.)\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n\n  // Save cars to localStorage whenever the list updates\n  useEffect(() => {\n    localStorage.setItem(\"cars\", JSON.stringify(cars));\n  }, [cars]);\n\n  // Handles form submission to add or update a car\n  const handleAddCar = e => {\n    e.preventDefault();\n    if (editIndex !== null) {\n      // If editing, update the item at the given index\n      setCars(prev => prev.map((car, i) => i === editIndex ? formData : car));\n      setEditIndex(null);\n    } else {\n      // Otherwise, add a new item to the list\n      setCars([...cars, formData]);\n    }\n    setFormData({});\n    setShowForm(false);\n  };\n\n  // Initiates editing for the selected item\n  const startEditing = index => {\n    setFormData(cars[index]);\n    setEditIndex(index);\n    setShowForm(true);\n  };\n\n  // Removes an item from the list and resets form if needed\n  const deleteCar = index => {\n    setCars(prev => prev.filter((_, i) => i !== index));\n    if (editIndex === index) {\n      setFormData({});\n      setEditIndex(null);\n      setShowForm(false);\n    }\n  };\n\n  // Pull the list of status options for the dropdown\n  const carStatuses = getStatusFilterOptions(\"cars\");\n\n  // Filter the list based on the selected status (e.g., \"owned\")\n  const filteredCars = filterByStatus(cars, filterStatus);\n\n  // Update the section title dynamically based on current filter\n  const sectionTitle = `Cars - ${getStatusLabel(\"cars\", filterStatus)}`;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!showForm && /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      className: \"mb-3\",\n      onClick: () => setShowForm(true),\n      children: \"Add Car\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), showForm && /*#__PURE__*/_jsxDEV(CarForm, {\n      formData: formData,\n      setFormData: setFormData,\n      onSubmit: handleAddCar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Status Filter: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        value: filterStatus,\n        onChange: e => setFilterStatus(e.target.value),\n        children: carStatuses.map(status => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: status,\n          children: getStatusLabel(\"cars\", status)\n        }, status, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ItemCardList, {\n      title: sectionTitle,\n      items: filteredCars,\n      schema: carSchema,\n      onEdit: startEditing,\n      onDelete: deleteCar,\n      renderItemExtras: item => /*#__PURE__*/_jsxDEV(ItemExtras, {\n        item: item\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(CarList, \"2ub0etBY5LeiTAhKPxnAM5W+Dhg=\");\n_c = CarList;\nexport default CarList;\nvar _c;\n$RefreshReg$(_c, \"CarList\");","map":{"version":3,"names":["React","useState","useEffect","Button","CarForm","ItemCardList","ItemExtras","carSchema","getStatusFilterOptions","filterByStatus","getStatusLabel","jsxDEV","_jsxDEV","Fragment","_Fragment","CarList","_s","cars","setCars","saved","localStorage","getItem","JSON","parse","formData","setFormData","showForm","setShowForm","editIndex","setEditIndex","filterStatus","setFilterStatus","setItem","stringify","handleAddCar","e","preventDefault","prev","map","car","i","startEditing","index","deleteCar","filter","_","carStatuses","filteredCars","sectionTitle","children","variant","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","target","status","title","items","schema","onEdit","onDelete","renderItemExtras","item","_c","$RefreshReg$"],"sources":["/Users/jfulbright/bootcamp/Projects/LifeLog/client/src/features/cars/components/CarList.js"],"sourcesContent":["// client/src/features/cars/CarList.js\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport CarForm from \"features/cars/components/CarForm\";\nimport ItemCardList from \"components/shared/ItemCardList\";\nimport ItemExtras from \"components/shared/ItemExtras\";\nimport carSchema from \"features/cars/carSchema\";\n\n// Helpers to manage status filter logic across all categories\nimport {\n  getStatusFilterOptions,\n  filterByStatus,\n  getStatusLabel,\n} from \"helpers/filterUtils\";\n\nfunction CarList() {\n  // Retrieve saved cars from localStorage on load\n  const [cars, setCars] = useState(() => {\n    const saved = localStorage.getItem(\"cars\");\n    return saved ? JSON.parse(saved) : [];\n  });\n\n  // Form data state (used for both adding and editing)\n  const [formData, setFormData] = useState({});\n\n  // Toggles whether the form is visible\n  const [showForm, setShowForm] = useState(false);\n\n  // Tracks which item (by index) is being edited, if any\n  const [editIndex, setEditIndex] = useState(null);\n\n  // Tracks selected filter status (\"all\", \"owned\", \"wishlist\", etc.)\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n\n  // Save cars to localStorage whenever the list updates\n  useEffect(() => {\n    localStorage.setItem(\"cars\", JSON.stringify(cars));\n  }, [cars]);\n\n  // Handles form submission to add or update a car\n  const handleAddCar = (e) => {\n    e.preventDefault();\n\n    if (editIndex !== null) {\n      // If editing, update the item at the given index\n      setCars((prev) =>\n        prev.map((car, i) => (i === editIndex ? formData : car))\n      );\n      setEditIndex(null);\n    } else {\n      // Otherwise, add a new item to the list\n      setCars([...cars, formData]);\n    }\n\n    setFormData({});\n    setShowForm(false);\n  };\n\n  // Initiates editing for the selected item\n  const startEditing = (index) => {\n    setFormData(cars[index]);\n    setEditIndex(index);\n    setShowForm(true);\n  };\n\n  // Removes an item from the list and resets form if needed\n  const deleteCar = (index) => {\n    setCars((prev) => prev.filter((_, i) => i !== index));\n    if (editIndex === index) {\n      setFormData({});\n      setEditIndex(null);\n      setShowForm(false);\n    }\n  };\n\n  // Pull the list of status options for the dropdown\n  const carStatuses = getStatusFilterOptions(\"cars\");\n\n  // Filter the list based on the selected status (e.g., \"owned\")\n  const filteredCars = filterByStatus(cars, filterStatus);\n\n  // Update the section title dynamically based on current filter\n  const sectionTitle = `Cars - ${getStatusLabel(\"cars\", filterStatus)}`;\n\n  return (\n    <>\n      {/* Show \"Add Car\" button only when form is hidden */}\n      {!showForm && (\n        <Button\n          variant=\"primary\"\n          className=\"mb-3\"\n          onClick={() => setShowForm(true)}\n        >\n          Add Car\n        </Button>\n      )}\n\n      {/* Render the form when adding or editing */}\n      {showForm && (\n        <CarForm\n          formData={formData}\n          setFormData={setFormData}\n          onSubmit={handleAddCar}\n        />\n      )}\n\n      {/* Dropdown to filter cars by status (e.g. Owned, Wishlist) */}\n      <div className=\"mb-3\">\n        <label>Status Filter: </label>\n        <select\n          value={filterStatus}\n          onChange={(e) => setFilterStatus(e.target.value)}\n        >\n          {carStatuses.map((status) => (\n            <option key={status} value={status}>\n              {getStatusLabel(\"cars\", status)}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* Reusable card list for displaying car entries */}\n      <ItemCardList\n        title={sectionTitle}\n        items={filteredCars}\n        schema={carSchema}\n        onEdit={startEditing}\n        onDelete={deleteCar}\n        renderItemExtras={(item) => <ItemExtras item={item} />}\n      />\n    </>\n  );\n}\n\nexport default CarList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}