{"ast":null,"code":"// src/utils/operator.js\n\n// Format raw number string into \"$15,000.00\"\nexport const formatCurrency = value => {\n  if (!value) return \"\";\n  const numeric = value.replace(/[^\\d]/g, \"\");\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\"\n  }).format(numeric / 100);\n};\n\n// Strip non-numeric characters for storing as raw cents\nexport const formatCurrencyInput = value => {\n  return value.replace(/[^\\d]/g, \"\");\n};\n\n// Generic input change handler for forms\nexport const handleInputChange = (e, setter) => {\n  const {\n    name,\n    value,\n    type\n  } = e.target;\n  const isCurrencyField = name.toLowerCase().includes(\"amount\") || name === \"monthlyRent\";\n  setter(prev => ({\n    ...prev,\n    [name]: isCurrencyField ? formatCurrencyInput(value) : value\n  }));\n};\n\n// For edit forms\nexport const handleEditChange = (e, editData, setEditData) => {\n  const {\n    name,\n    value\n  } = e.target;\n  const isCurrencyField = name.toLowerCase().includes(\"amount\") || name === \"monthlyRent\";\n  setEditData({\n    ...editData,\n    [name]: isCurrencyField ? formatCurrencyInput(value) : value\n  });\n};\n\n// Generate Google Maps link from address object\nexport const getGoogleMapsLink = ({\n  street,\n  city,\n  state,\n  zip\n}) => {\n  const query = `${street}, ${city}, ${state} ${zip}`;\n  return `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(query)}`;\n};\n\n// Determines if a field should be shown based on other form values\n// Handles multiple dependencies too (visibleWhen: { type: 'Car', ownership: 'Leased' })\nexport const isFieldVisible = (field, formData) => {\n  if (!field.visibleWhen) return true;\n  return Object.entries(field.visibleWhen).every(([key, expectedValue]) => {\n    return formData[key] === expectedValue;\n  });\n};","map":{"version":3,"names":["formatCurrency","value","numeric","replace","Intl","NumberFormat","style","currency","format","formatCurrencyInput","handleInputChange","e","setter","name","type","target","isCurrencyField","toLowerCase","includes","prev","handleEditChange","editData","setEditData","getGoogleMapsLink","street","city","state","zip","query","encodeURIComponent","isFieldVisible","field","formData","visibleWhen","Object","entries","every","key","expectedValue"],"sources":["/Users/jfulbright/bootcamp/Projects/LifeLog/client/src/helpers/operator.js"],"sourcesContent":["// src/utils/operator.js\n\n// Format raw number string into \"$15,000.00\"\nexport const formatCurrency = (value) => {\n  if (!value) return \"\";\n  const numeric = value.replace(/[^\\d]/g, \"\");\n  return new Intl.NumberFormat(\"en-US\", {\n    style: \"currency\",\n    currency: \"USD\",\n  }).format(numeric / 100);\n};\n\n// Strip non-numeric characters for storing as raw cents\nexport const formatCurrencyInput = (value) => {\n  return value.replace(/[^\\d]/g, \"\");\n};\n\n// Generic input change handler for forms\nexport const handleInputChange = (e, setter) => {\n  const { name, value, type } = e.target;\n  const isCurrencyField =\n    name.toLowerCase().includes(\"amount\") || name === \"monthlyRent\";\n\n  setter((prev) => ({\n    ...prev,\n    [name]: isCurrencyField ? formatCurrencyInput(value) : value,\n  }));\n};\n\n// For edit forms\nexport const handleEditChange = (e, editData, setEditData) => {\n  const { name, value } = e.target;\n  const isCurrencyField =\n    name.toLowerCase().includes(\"amount\") || name === \"monthlyRent\";\n\n  setEditData({\n    ...editData,\n    [name]: isCurrencyField ? formatCurrencyInput(value) : value,\n  });\n};\n\n// Generate Google Maps link from address object\nexport const getGoogleMapsLink = ({ street, city, state, zip }) => {\n  const query = `${street}, ${city}, ${state} ${zip}`;\n  return `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(\n    query\n  )}`;\n};\n\n// Determines if a field should be shown based on other form values\n// Handles multiple dependencies too (visibleWhen: { type: 'Car', ownership: 'Leased' })\nexport const isFieldVisible = (field, formData) => {\n  if (!field.visibleWhen) return true;\n\n  return Object.entries(field.visibleWhen).every(([key, expectedValue]) => {\n    return formData[key] === expectedValue;\n  });\n};\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,cAAc,GAAIC,KAAK,IAAK;EACvC,IAAI,CAACA,KAAK,EAAE,OAAO,EAAE;EACrB,MAAMC,OAAO,GAAGD,KAAK,CAACE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;EAC3C,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE;EACZ,CAAC,CAAC,CAACC,MAAM,CAACN,OAAO,GAAG,GAAG,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMO,mBAAmB,GAAIR,KAAK,IAAK;EAC5C,OAAOA,KAAK,CAACE,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;AACpC,CAAC;;AAED;AACA,OAAO,MAAMO,iBAAiB,GAAGA,CAACC,CAAC,EAAEC,MAAM,KAAK;EAC9C,MAAM;IAAEC,IAAI;IAAEZ,KAAK;IAAEa;EAAK,CAAC,GAAGH,CAAC,CAACI,MAAM;EACtC,MAAMC,eAAe,GACnBH,IAAI,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAAIL,IAAI,KAAK,aAAa;EAEjED,MAAM,CAAEO,IAAI,KAAM;IAChB,GAAGA,IAAI;IACP,CAACN,IAAI,GAAGG,eAAe,GAAGP,mBAAmB,CAACR,KAAK,CAAC,GAAGA;EACzD,CAAC,CAAC,CAAC;AACL,CAAC;;AAED;AACA,OAAO,MAAMmB,gBAAgB,GAAGA,CAACT,CAAC,EAAEU,QAAQ,EAAEC,WAAW,KAAK;EAC5D,MAAM;IAAET,IAAI;IAAEZ;EAAM,CAAC,GAAGU,CAAC,CAACI,MAAM;EAChC,MAAMC,eAAe,GACnBH,IAAI,CAACI,WAAW,CAAC,CAAC,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAAIL,IAAI,KAAK,aAAa;EAEjES,WAAW,CAAC;IACV,GAAGD,QAAQ;IACX,CAACR,IAAI,GAAGG,eAAe,GAAGP,mBAAmB,CAACR,KAAK,CAAC,GAAGA;EACzD,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMsB,iBAAiB,GAAGA,CAAC;EAAEC,MAAM;EAAEC,IAAI;EAAEC,KAAK;EAAEC;AAAI,CAAC,KAAK;EACjE,MAAMC,KAAK,GAAG,GAAGJ,MAAM,KAAKC,IAAI,KAAKC,KAAK,IAAIC,GAAG,EAAE;EACnD,OAAO,mDAAmDE,kBAAkB,CAC1ED,KACF,CAAC,EAAE;AACL,CAAC;;AAED;AACA;AACA,OAAO,MAAME,cAAc,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EACjD,IAAI,CAACD,KAAK,CAACE,WAAW,EAAE,OAAO,IAAI;EAEnC,OAAOC,MAAM,CAACC,OAAO,CAACJ,KAAK,CAACE,WAAW,CAAC,CAACG,KAAK,CAAC,CAAC,CAACC,GAAG,EAAEC,aAAa,CAAC,KAAK;IACvE,OAAON,QAAQ,CAACK,GAAG,CAAC,KAAKC,aAAa;EACxC,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}