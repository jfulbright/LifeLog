{"ast":null,"code":"// NO api key exposed in frontend!\nexport async function fetchSetlists(artist, year) {\n  var _data$setlist;\n  const response = await fetch(`http://localhost:5050/api/setlists?artist=${artist}&year=${year}`);\n  if (!response.ok) throw new Error(\"Failed to fetch setlists\");\n  const data = await response.json();\n  return ((_data$setlist = data.setlist) === null || _data$setlist === void 0 ? void 0 : _data$setlist.map(item => {\n    var _item$sets, _item$sets$set, _item$sets$set$, _item$artist, _item$venue, _item$venue2, _item$venue2$city, _item$venue3, _item$venue3$city, _item$venue3$city$cou, _item$tour, _item$artist2;\n    const setlist = Array.isArray((_item$sets = item.sets) === null || _item$sets === void 0 ? void 0 : (_item$sets$set = _item$sets.set) === null || _item$sets$set === void 0 ? void 0 : (_item$sets$set$ = _item$sets$set[0]) === null || _item$sets$set$ === void 0 ? void 0 : _item$sets$set$.song) ? item.sets.set[0].song.map(s => s.name) : [];\n    return {\n      artist: ((_item$artist = item.artist) === null || _item$artist === void 0 ? void 0 : _item$artist.name) || artist,\n      date: item.eventDate || \"\",\n      venue: ((_item$venue = item.venue) === null || _item$venue === void 0 ? void 0 : _item$venue.name) || \"\",\n      location: `${((_item$venue2 = item.venue) === null || _item$venue2 === void 0 ? void 0 : (_item$venue2$city = _item$venue2.city) === null || _item$venue2$city === void 0 ? void 0 : _item$venue2$city.name) || \"\"}, ${((_item$venue3 = item.venue) === null || _item$venue3 === void 0 ? void 0 : (_item$venue3$city = _item$venue3.city) === null || _item$venue3$city === void 0 ? void 0 : (_item$venue3$city$cou = _item$venue3$city.country) === null || _item$venue3$city$cou === void 0 ? void 0 : _item$venue3$city$cou.code) || \"\"}`,\n      tour: ((_item$tour = item.tour) === null || _item$tour === void 0 ? void 0 : _item$tour.name) || \"\",\n      setlist,\n      sourceUrl: `https://www.setlist.fm/setlist/${(_item$artist2 = item.artist) === null || _item$artist2 === void 0 ? void 0 : _item$artist2.name}/${item.id}`,\n      type: \"concert\",\n      status: \"visited\"\n    };\n  })) || [];\n}","map":{"version":3,"names":["fetchSetlists","artist","year","_data$setlist","response","fetch","ok","Error","data","json","setlist","map","item","_item$sets","_item$sets$set","_item$sets$set$","_item$artist","_item$venue","_item$venue2","_item$venue2$city","_item$venue3","_item$venue3$city","_item$venue3$city$cou","_item$tour","_item$artist2","Array","isArray","sets","set","song","s","name","date","eventDate","venue","location","city","country","code","tour","sourceUrl","id","type","status"],"sources":["/Users/jfulbright/bootcamp/Projects/LifeLog/client/src/features/concerts/api/concertApi.js"],"sourcesContent":["// NO api key exposed in frontend!\nexport async function fetchSetlists(artist, year) {\n  const response = await fetch(\n    `http://localhost:5050/api/setlists?artist=${artist}&year=${year}`\n  );\n\n  if (!response.ok) throw new Error(\"Failed to fetch setlists\");\n\n  const data = await response.json();\n\n  return (\n    data.setlist?.map((item) => {\n      const setlist = Array.isArray(item.sets?.set?.[0]?.song)\n        ? item.sets.set[0].song.map((s) => s.name)\n        : [];\n\n      return {\n        artist: item.artist?.name || artist,\n        date: item.eventDate || \"\",\n        venue: item.venue?.name || \"\",\n        location: `${item.venue?.city?.name || \"\"}, ${\n          item.venue?.city?.country?.code || \"\"\n        }`,\n        tour: item.tour?.name || \"\",\n        setlist,\n        sourceUrl: `https://www.setlist.fm/setlist/${item.artist?.name}/${item.id}`,\n        type: \"concert\",\n        status: \"visited\",\n      };\n    }) || []\n  );\n}\n"],"mappings":"AAAA;AACA,OAAO,eAAeA,aAAaA,CAACC,MAAM,EAAEC,IAAI,EAAE;EAAA,IAAAC,aAAA;EAChD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,6CAA6CJ,MAAM,SAASC,IAAI,EAClE,CAAC;EAED,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAE7D,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;EAElC,OACE,EAAAN,aAAA,GAAAK,IAAI,CAACE,OAAO,cAAAP,aAAA,uBAAZA,aAAA,CAAcQ,GAAG,CAAEC,IAAI,IAAK;IAAA,IAAAC,UAAA,EAAAC,cAAA,EAAAC,eAAA,EAAAC,YAAA,EAAAC,WAAA,EAAAC,YAAA,EAAAC,iBAAA,EAAAC,YAAA,EAAAC,iBAAA,EAAAC,qBAAA,EAAAC,UAAA,EAAAC,aAAA;IAC1B,MAAMd,OAAO,GAAGe,KAAK,CAACC,OAAO,EAAAb,UAAA,GAACD,IAAI,CAACe,IAAI,cAAAd,UAAA,wBAAAC,cAAA,GAATD,UAAA,CAAWe,GAAG,cAAAd,cAAA,wBAAAC,eAAA,GAAdD,cAAA,CAAiB,CAAC,CAAC,cAAAC,eAAA,uBAAnBA,eAAA,CAAqBc,IAAI,CAAC,GACpDjB,IAAI,CAACe,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAACC,IAAI,CAAClB,GAAG,CAAEmB,CAAC,IAAKA,CAAC,CAACC,IAAI,CAAC,GACxC,EAAE;IAEN,OAAO;MACL9B,MAAM,EAAE,EAAAe,YAAA,GAAAJ,IAAI,CAACX,MAAM,cAAAe,YAAA,uBAAXA,YAAA,CAAae,IAAI,KAAI9B,MAAM;MACnC+B,IAAI,EAAEpB,IAAI,CAACqB,SAAS,IAAI,EAAE;MAC1BC,KAAK,EAAE,EAAAjB,WAAA,GAAAL,IAAI,CAACsB,KAAK,cAAAjB,WAAA,uBAAVA,WAAA,CAAYc,IAAI,KAAI,EAAE;MAC7BI,QAAQ,EAAE,GAAG,EAAAjB,YAAA,GAAAN,IAAI,CAACsB,KAAK,cAAAhB,YAAA,wBAAAC,iBAAA,GAAVD,YAAA,CAAYkB,IAAI,cAAAjB,iBAAA,uBAAhBA,iBAAA,CAAkBY,IAAI,KAAI,EAAE,KACvC,EAAAX,YAAA,GAAAR,IAAI,CAACsB,KAAK,cAAAd,YAAA,wBAAAC,iBAAA,GAAVD,YAAA,CAAYgB,IAAI,cAAAf,iBAAA,wBAAAC,qBAAA,GAAhBD,iBAAA,CAAkBgB,OAAO,cAAAf,qBAAA,uBAAzBA,qBAAA,CAA2BgB,IAAI,KAAI,EAAE,EACrC;MACFC,IAAI,EAAE,EAAAhB,UAAA,GAAAX,IAAI,CAAC2B,IAAI,cAAAhB,UAAA,uBAATA,UAAA,CAAWQ,IAAI,KAAI,EAAE;MAC3BrB,OAAO;MACP8B,SAAS,EAAE,mCAAAhB,aAAA,GAAkCZ,IAAI,CAACX,MAAM,cAAAuB,aAAA,uBAAXA,aAAA,CAAaO,IAAI,IAAInB,IAAI,CAAC6B,EAAE,EAAE;MAC3EC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE;IACV,CAAC;EACH,CAAC,CAAC,KAAI,EAAE;AAEZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}