{"ast":null,"code":"export async function fetchSetlists(artist, year) {\n  var _json$setlist;\n  const url = `https://api.setlist.fm/rest/1.0/search/setlists?artistName=${encodeURIComponent(artist)}&year=${year}`;\n  const response = await fetch(url, {\n    headers: {\n      \"x-api-key\": process.env.REACT_APP_SETLISTFM_API_KEY,\n      Accept: \"application/json\"\n    }\n  });\n  if (!response.ok) throw new Error(\"Failed to fetch setlists\");\n  const json = await response.json();\n  return ((_json$setlist = json.setlist) === null || _json$setlist === void 0 ? void 0 : _json$setlist.map(item => {\n    var _item$artist, _item$venue, _item$venue2, _item$venue2$city, _item$venue3, _item$venue3$city, _item$venue3$city$cou, _item$tour, _item$sets, _item$sets$set, _item$sets$set$, _item$artist2;\n    return {\n      artist: ((_item$artist = item.artist) === null || _item$artist === void 0 ? void 0 : _item$artist.name) || \"\",\n      date: item.eventDate || \"\",\n      venue: ((_item$venue = item.venue) === null || _item$venue === void 0 ? void 0 : _item$venue.name) || \"\",\n      location: `${((_item$venue2 = item.venue) === null || _item$venue2 === void 0 ? void 0 : (_item$venue2$city = _item$venue2.city) === null || _item$venue2$city === void 0 ? void 0 : _item$venue2$city.name) || \"\"}, ${((_item$venue3 = item.venue) === null || _item$venue3 === void 0 ? void 0 : (_item$venue3$city = _item$venue3.city) === null || _item$venue3$city === void 0 ? void 0 : (_item$venue3$city$cou = _item$venue3$city.country) === null || _item$venue3$city$cou === void 0 ? void 0 : _item$venue3$city$cou.code) || \"\"}`,\n      tour: ((_item$tour = item.tour) === null || _item$tour === void 0 ? void 0 : _item$tour.name) || \"\",\n      setlist: Array.isArray((_item$sets = item.sets) === null || _item$sets === void 0 ? void 0 : (_item$sets$set = _item$sets.set) === null || _item$sets$set === void 0 ? void 0 : (_item$sets$set$ = _item$sets$set[0]) === null || _item$sets$set$ === void 0 ? void 0 : _item$sets$set$.song) ? item.sets.set[0].song.map(song => song.name) : [],\n      sourceUrl: `https://www.setlist.fm/setlist/${(_item$artist2 = item.artist) === null || _item$artist2 === void 0 ? void 0 : _item$artist2.name}/${item.id}`,\n      type: \"concert\",\n      status: \"visited\"\n    };\n  })) || [];\n}","map":{"version":3,"names":["fetchSetlists","artist","year","_json$setlist","url","encodeURIComponent","response","fetch","headers","process","env","REACT_APP_SETLISTFM_API_KEY","Accept","ok","Error","json","setlist","map","item","_item$artist","_item$venue","_item$venue2","_item$venue2$city","_item$venue3","_item$venue3$city","_item$venue3$city$cou","_item$tour","_item$sets","_item$sets$set","_item$sets$set$","_item$artist2","name","date","eventDate","venue","location","city","country","code","tour","Array","isArray","sets","set","song","sourceUrl","id","type","status"],"sources":["/Users/jfulbright/bootcamp/Projects/LifeLog/client/src/features/concerts/api/concertApi.js"],"sourcesContent":["export async function fetchSetlists(artist, year) {\n  const url = `https://api.setlist.fm/rest/1.0/search/setlists?artistName=${encodeURIComponent(\n    artist\n  )}&year=${year}`;\n\n  const response = await fetch(url, {\n    headers: {\n      \"x-api-key\": process.env.REACT_APP_SETLISTFM_API_KEY,\n      Accept: \"application/json\",\n    },\n  });\n\n  if (!response.ok) throw new Error(\"Failed to fetch setlists\");\n  const json = await response.json();\n\n  return (\n    json.setlist?.map((item) => ({\n      artist: item.artist?.name || \"\",\n      date: item.eventDate || \"\",\n      venue: item.venue?.name || \"\",\n      location: `${item.venue?.city?.name || \"\"}, ${\n        item.venue?.city?.country?.code || \"\"\n      }`,\n      tour: item.tour?.name || \"\",\n      setlist: Array.isArray(item.sets?.set?.[0]?.song)\n        ? item.sets.set[0].song.map((song) => song.name)\n        : [],\n      sourceUrl: `https://www.setlist.fm/setlist/${item.artist?.name}/${item.id}`,\n      type: \"concert\",\n      status: \"visited\",\n    })) || []\n  );\n}\n"],"mappings":"AAAA,OAAO,eAAeA,aAAaA,CAACC,MAAM,EAAEC,IAAI,EAAE;EAAA,IAAAC,aAAA;EAChD,MAAMC,GAAG,GAAG,8DAA8DC,kBAAkB,CAC1FJ,MACF,CAAC,SAASC,IAAI,EAAE;EAEhB,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;IAChCI,OAAO,EAAE;MACP,WAAW,EAAEC,OAAO,CAACC,GAAG,CAACC,2BAA2B;MACpDC,MAAM,EAAE;IACV;EACF,CAAC,CAAC;EAEF,IAAI,CAACN,QAAQ,CAACO,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAC7D,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACS,IAAI,CAAC,CAAC;EAElC,OACE,EAAAZ,aAAA,GAAAY,IAAI,CAACC,OAAO,cAAAb,aAAA,uBAAZA,aAAA,CAAcc,GAAG,CAAEC,IAAI;IAAA,IAAAC,YAAA,EAAAC,WAAA,EAAAC,YAAA,EAAAC,iBAAA,EAAAC,YAAA,EAAAC,iBAAA,EAAAC,qBAAA,EAAAC,UAAA,EAAAC,UAAA,EAAAC,cAAA,EAAAC,eAAA,EAAAC,aAAA;IAAA,OAAM;MAC3B7B,MAAM,EAAE,EAAAkB,YAAA,GAAAD,IAAI,CAACjB,MAAM,cAAAkB,YAAA,uBAAXA,YAAA,CAAaY,IAAI,KAAI,EAAE;MAC/BC,IAAI,EAAEd,IAAI,CAACe,SAAS,IAAI,EAAE;MAC1BC,KAAK,EAAE,EAAAd,WAAA,GAAAF,IAAI,CAACgB,KAAK,cAAAd,WAAA,uBAAVA,WAAA,CAAYW,IAAI,KAAI,EAAE;MAC7BI,QAAQ,EAAE,GAAG,EAAAd,YAAA,GAAAH,IAAI,CAACgB,KAAK,cAAAb,YAAA,wBAAAC,iBAAA,GAAVD,YAAA,CAAYe,IAAI,cAAAd,iBAAA,uBAAhBA,iBAAA,CAAkBS,IAAI,KAAI,EAAE,KACvC,EAAAR,YAAA,GAAAL,IAAI,CAACgB,KAAK,cAAAX,YAAA,wBAAAC,iBAAA,GAAVD,YAAA,CAAYa,IAAI,cAAAZ,iBAAA,wBAAAC,qBAAA,GAAhBD,iBAAA,CAAkBa,OAAO,cAAAZ,qBAAA,uBAAzBA,qBAAA,CAA2Ba,IAAI,KAAI,EAAE,EACrC;MACFC,IAAI,EAAE,EAAAb,UAAA,GAAAR,IAAI,CAACqB,IAAI,cAAAb,UAAA,uBAATA,UAAA,CAAWK,IAAI,KAAI,EAAE;MAC3Bf,OAAO,EAAEwB,KAAK,CAACC,OAAO,EAAAd,UAAA,GAACT,IAAI,CAACwB,IAAI,cAAAf,UAAA,wBAAAC,cAAA,GAATD,UAAA,CAAWgB,GAAG,cAAAf,cAAA,wBAAAC,eAAA,GAAdD,cAAA,CAAiB,CAAC,CAAC,cAAAC,eAAA,uBAAnBA,eAAA,CAAqBe,IAAI,CAAC,GAC7C1B,IAAI,CAACwB,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC3B,GAAG,CAAE2B,IAAI,IAAKA,IAAI,CAACb,IAAI,CAAC,GAC9C,EAAE;MACNc,SAAS,EAAE,mCAAAf,aAAA,GAAkCZ,IAAI,CAACjB,MAAM,cAAA6B,aAAA,uBAAXA,aAAA,CAAaC,IAAI,IAAIb,IAAI,CAAC4B,EAAE,EAAE;MAC3EC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE;IACV,CAAC;EAAA,CAAC,CAAC,KAAI,EAAE;AAEb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}