{"ast":null,"code":"export async function fetchSetlists(artist, year) {\n  var _json$setlist;\n  const url = `https://api.setlist.fm/rest/1.0/search/setlists?artistName=${encodeURIComponent(artist)}&year=${year}`;\n  const response = await fetch(url, {\n    headers: {\n      'x-api-key': process.env.REACT_APP_SETLISTFM_API_KEY,\n      'Accept': 'application/json'\n    }\n  });\n  if (!response.ok) throw new Error('Failed to fetch setlists');\n  const json = await response.json();\n  return ((_json$setlist = json.setlist) === null || _json$setlist === void 0 ? void 0 : _json$setlist.map(item => {\n    var _item$artist, _item$venue, _item$venue2, _item$venue2$city, _item$venue3, _item$venue3$city, _item$venue3$city$cou, _item$tour, _item$sets, _item$sets$set, _item$sets$set$, _item$sets$set$$song, _item$artist2;\n    return {\n      artist: ((_item$artist = item.artist) === null || _item$artist === void 0 ? void 0 : _item$artist.name) || artist,\n      date: item.eventDate || '',\n      venue: ((_item$venue = item.venue) === null || _item$venue === void 0 ? void 0 : _item$venue.name) || '',\n      location: `${((_item$venue2 = item.venue) === null || _item$venue2 === void 0 ? void 0 : (_item$venue2$city = _item$venue2.city) === null || _item$venue2$city === void 0 ? void 0 : _item$venue2$city.name) || ''}, ${((_item$venue3 = item.venue) === null || _item$venue3 === void 0 ? void 0 : (_item$venue3$city = _item$venue3.city) === null || _item$venue3$city === void 0 ? void 0 : (_item$venue3$city$cou = _item$venue3$city.country) === null || _item$venue3$city$cou === void 0 ? void 0 : _item$venue3$city$cou.code) || ''}`,\n      tour: ((_item$tour = item.tour) === null || _item$tour === void 0 ? void 0 : _item$tour.name) || '',\n      setlist: ((_item$sets = item.sets) === null || _item$sets === void 0 ? void 0 : (_item$sets$set = _item$sets.set) === null || _item$sets$set === void 0 ? void 0 : (_item$sets$set$ = _item$sets$set[0]) === null || _item$sets$set$ === void 0 ? void 0 : (_item$sets$set$$song = _item$sets$set$.song) === null || _item$sets$set$$song === void 0 ? void 0 : _item$sets$set$$song.map(song => song.name)) || [],\n      // ðŸ›  default to []\n      sourceUrl: `https://www.setlist.fm/setlist/${(_item$artist2 = item.artist) === null || _item$artist2 === void 0 ? void 0 : _item$artist2.name}/${item.id}`,\n      type: 'concert',\n      status: 'visited'\n    };\n  })) || [];\n}","map":{"version":3,"names":["fetchSetlists","artist","year","_json$setlist","url","encodeURIComponent","response","fetch","headers","process","env","REACT_APP_SETLISTFM_API_KEY","ok","Error","json","setlist","map","item","_item$artist","_item$venue","_item$venue2","_item$venue2$city","_item$venue3","_item$venue3$city","_item$venue3$city$cou","_item$tour","_item$sets","_item$sets$set","_item$sets$set$","_item$sets$set$$song","_item$artist2","name","date","eventDate","venue","location","city","country","code","tour","sets","set","song","sourceUrl","id","type","status"],"sources":["/Users/jfulbright/bootcamp/Projects/LifeLog/client/src/features/concerts/api/concertApi.js"],"sourcesContent":["export async function fetchSetlists(artist, year) {\n  const url = `https://api.setlist.fm/rest/1.0/search/setlists?artistName=${encodeURIComponent(artist)}&year=${year}`;\n\n  const response = await fetch(url, {\n    headers: {\n      'x-api-key': process.env.REACT_APP_SETLISTFM_API_KEY,\n      'Accept': 'application/json',\n    }\n  });\n\n  if (!response.ok) throw new Error('Failed to fetch setlists');\n\n  const json = await response.json();\n\n  return json.setlist?.map(item => ({\n    artist: item.artist?.name || artist,\n    date: item.eventDate || '',\n    venue: item.venue?.name || '',\n    location: `${item.venue?.city?.name || ''}, ${item.venue?.city?.country?.code || ''}`,\n    tour: item.tour?.name || '',\n    setlist: item.sets?.set?.[0]?.song?.map(song => song.name) || [],  // ðŸ›  default to []\n    sourceUrl: `https://www.setlist.fm/setlist/${item.artist?.name}/${item.id}`,\n    type: 'concert',\n    status: 'visited',\n  })) || [];\n}\n"],"mappings":"AAAA,OAAO,eAAeA,aAAaA,CAACC,MAAM,EAAEC,IAAI,EAAE;EAAA,IAAAC,aAAA;EAChD,MAAMC,GAAG,GAAG,8DAA8DC,kBAAkB,CAACJ,MAAM,CAAC,SAASC,IAAI,EAAE;EAEnH,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAE;IAChCI,OAAO,EAAE;MACP,WAAW,EAAEC,OAAO,CAACC,GAAG,CAACC,2BAA2B;MACpD,QAAQ,EAAE;IACZ;EACF,CAAC,CAAC;EAEF,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EAE7D,MAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACQ,IAAI,CAAC,CAAC;EAElC,OAAO,EAAAX,aAAA,GAAAW,IAAI,CAACC,OAAO,cAAAZ,aAAA,uBAAZA,aAAA,CAAca,GAAG,CAACC,IAAI;IAAA,IAAAC,YAAA,EAAAC,WAAA,EAAAC,YAAA,EAAAC,iBAAA,EAAAC,YAAA,EAAAC,iBAAA,EAAAC,qBAAA,EAAAC,UAAA,EAAAC,UAAA,EAAAC,cAAA,EAAAC,eAAA,EAAAC,oBAAA,EAAAC,aAAA;IAAA,OAAK;MAChC7B,MAAM,EAAE,EAAAiB,YAAA,GAAAD,IAAI,CAAChB,MAAM,cAAAiB,YAAA,uBAAXA,YAAA,CAAaa,IAAI,KAAI9B,MAAM;MACnC+B,IAAI,EAAEf,IAAI,CAACgB,SAAS,IAAI,EAAE;MAC1BC,KAAK,EAAE,EAAAf,WAAA,GAAAF,IAAI,CAACiB,KAAK,cAAAf,WAAA,uBAAVA,WAAA,CAAYY,IAAI,KAAI,EAAE;MAC7BI,QAAQ,EAAE,GAAG,EAAAf,YAAA,GAAAH,IAAI,CAACiB,KAAK,cAAAd,YAAA,wBAAAC,iBAAA,GAAVD,YAAA,CAAYgB,IAAI,cAAAf,iBAAA,uBAAhBA,iBAAA,CAAkBU,IAAI,KAAI,EAAE,KAAK,EAAAT,YAAA,GAAAL,IAAI,CAACiB,KAAK,cAAAZ,YAAA,wBAAAC,iBAAA,GAAVD,YAAA,CAAYc,IAAI,cAAAb,iBAAA,wBAAAC,qBAAA,GAAhBD,iBAAA,CAAkBc,OAAO,cAAAb,qBAAA,uBAAzBA,qBAAA,CAA2Bc,IAAI,KAAI,EAAE,EAAE;MACrFC,IAAI,EAAE,EAAAd,UAAA,GAAAR,IAAI,CAACsB,IAAI,cAAAd,UAAA,uBAATA,UAAA,CAAWM,IAAI,KAAI,EAAE;MAC3BhB,OAAO,EAAE,EAAAW,UAAA,GAAAT,IAAI,CAACuB,IAAI,cAAAd,UAAA,wBAAAC,cAAA,GAATD,UAAA,CAAWe,GAAG,cAAAd,cAAA,wBAAAC,eAAA,GAAdD,cAAA,CAAiB,CAAC,CAAC,cAAAC,eAAA,wBAAAC,oBAAA,GAAnBD,eAAA,CAAqBc,IAAI,cAAAb,oBAAA,uBAAzBA,oBAAA,CAA2Bb,GAAG,CAAC0B,IAAI,IAAIA,IAAI,CAACX,IAAI,CAAC,KAAI,EAAE;MAAG;MACnEY,SAAS,EAAE,mCAAAb,aAAA,GAAkCb,IAAI,CAAChB,MAAM,cAAA6B,aAAA,uBAAXA,aAAA,CAAaC,IAAI,IAAId,IAAI,CAAC2B,EAAE,EAAE;MAC3EC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE;IACV,CAAC;EAAA,CAAC,CAAC,KAAI,EAAE;AACX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}