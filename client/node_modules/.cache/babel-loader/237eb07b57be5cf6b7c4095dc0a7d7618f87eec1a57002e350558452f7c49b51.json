{"ast":null,"code":"var _jsxFileName = \"/Users/jfulbright/bootcamp/Projects/LifeLog/client/src/components/shared/ItemForm.js\";\nimport React from \"react\";\nimport { Form, Button, Card, Row, Col } from \"react-bootstrap\";\nimport { formatCurrency, handleInputChange, isFieldVisible } from \"helpers/operator\";\n\n/**\n * A shared, reusable form component that dynamically renders fields\n * based on a schema definition.\n * Supports sections, ordering, optional display, and read-only links.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ItemForm({\n  schema,\n  formData,\n  setFormData,\n  onSubmit,\n  title = \"Add Entry\",\n  buttonText = \"Add\"\n}) {\n  const isReadOnly = !setFormData;\n\n  // Group and sort fields by section and order\n  const visibleFields = schema.filter(field => !field.hidden && isFieldVisible(field, formData)).sort((a, b) => (a.order || 0) - (b.order || 0));\n  const groupedFields = visibleFields.reduce((acc, field) => {\n    const section = field.section || \"Main\";\n    if (!acc[section]) acc[section] = [];\n    acc[section].push(field);\n    return acc;\n  }, {});\n  const renderField = field => {\n    const value = formData[field.name] || \"\";\n    if (isReadOnly && field.isLink && value) {\n      return /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: field.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: value,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            className: \"text-primary text-decoration-underline\",\n            children: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, field.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this);\n    }\n    const commonProps = {\n      name: field.name,\n      value: value,\n      onChange: e => handleInputChange(e, setFormData)\n    };\n    let inputElement;\n    if (field.type === \"select\") {\n      inputElement = /*#__PURE__*/_jsxDEV(Form.Select, {\n        ...commonProps,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), field.options.map(opt => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: opt,\n          children: opt\n        }, opt, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this);\n    } else if (field.type === \"textarea\") {\n      inputElement = /*#__PURE__*/_jsxDEV(Form.Control, {\n        as: \"textarea\",\n        rows: 2,\n        ...commonProps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 22\n      }, this);\n    } else {\n      inputElement = /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: field.isCurrency ? \"text\" : field.type || \"text\",\n        ...commonProps,\n        value: field.isCurrency ? formatCurrency(formData[field.name] || \"\") : formData[field.name] || \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: [field.label, field.optional && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-muted ms-1\",\n          children: \"(optional)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), inputElement]\n    }, field.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"mb-4\",\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: onSubmit,\n        children: [Object.entries(groupedFields).map(([section, fields]) => /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n            className: \"fw-bold\",\n            children: section\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: fields.map(field => /*#__PURE__*/_jsxDEV(Col, {\n              md: field.fullWidth ? 12 : 6,\n              children: renderField(field)\n            }, field.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this)]\n        }, section, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this)), !isReadOnly && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: buttonText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_c = ItemForm;\nexport default ItemForm;\nvar _c;\n$RefreshReg$(_c, \"ItemForm\");","map":{"version":3,"names":["React","Form","Button","Card","Row","Col","formatCurrency","handleInputChange","isFieldVisible","jsxDEV","_jsxDEV","ItemForm","schema","formData","setFormData","onSubmit","title","buttonText","isReadOnly","visibleFields","filter","field","hidden","sort","a","b","order","groupedFields","reduce","acc","section","push","renderField","value","name","isLink","Group","className","children","Label","label","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","commonProps","onChange","e","inputElement","type","Select","options","map","opt","Control","as","rows","isCurrency","optional","Body","Title","Object","entries","fields","md","fullWidth","variant","_c","$RefreshReg$"],"sources":["/Users/jfulbright/bootcamp/Projects/LifeLog/client/src/components/shared/ItemForm.js"],"sourcesContent":["import React from \"react\";\nimport { Form, Button, Card, Row, Col } from \"react-bootstrap\";\nimport {\n  formatCurrency,\n  handleInputChange,\n  isFieldVisible,\n} from \"helpers/operator\";\n\n/**\n * A shared, reusable form component that dynamically renders fields\n * based on a schema definition.\n * Supports sections, ordering, optional display, and read-only links.\n */\nfunction ItemForm({\n  schema,\n  formData,\n  setFormData,\n  onSubmit,\n  title = \"Add Entry\",\n  buttonText = \"Add\",\n}) {\n  const isReadOnly = !setFormData;\n\n  // Group and sort fields by section and order\n  const visibleFields = schema\n    .filter((field) => !field.hidden && isFieldVisible(field, formData))\n    .sort((a, b) => (a.order || 0) - (b.order || 0));\n\n  const groupedFields = visibleFields.reduce((acc, field) => {\n    const section = field.section || \"Main\";\n    if (!acc[section]) acc[section] = [];\n    acc[section].push(field);\n    return acc;\n  }, {});\n\n  const renderField = (field) => {\n    const value = formData[field.name] || \"\";\n\n    if (isReadOnly && field.isLink && value) {\n      return (\n        <Form.Group key={field.name} className=\"mb-3\">\n          <Form.Label>{field.label}</Form.Label>\n          <div>\n            <a\n              href={value}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-primary text-decoration-underline\"\n            >\n              {value}\n            </a>\n          </div>\n        </Form.Group>\n      );\n    }\n\n    const commonProps = {\n      name: field.name,\n      value: value,\n      onChange: (e) => handleInputChange(e, setFormData),\n    };\n\n    let inputElement;\n    if (field.type === \"select\") {\n      inputElement = (\n        <Form.Select {...commonProps}>\n          <option value=\"\">Select</option>\n          {field.options.map((opt) => (\n            <option key={opt} value={opt}>\n              {opt}\n            </option>\n          ))}\n        </Form.Select>\n      );\n    } else if (field.type === \"textarea\") {\n      inputElement = <Form.Control as=\"textarea\" rows={2} {...commonProps} />;\n    } else {\n      inputElement = (\n        <Form.Control\n          type={field.isCurrency ? \"text\" : field.type || \"text\"}\n          {...commonProps}\n          value={\n            field.isCurrency\n              ? formatCurrency(formData[field.name] || \"\")\n              : formData[field.name] || \"\"\n          }\n        />\n      );\n    }\n\n    return (\n      <Form.Group key={field.name} className=\"mb-3\">\n        <Form.Label>\n          {field.label}\n          {field.optional && (\n            <span className=\"text-muted ms-1\">(optional)</span>\n          )}\n        </Form.Label>\n        {inputElement}\n      </Form.Group>\n    );\n  };\n\n  return (\n    <Card className=\"mb-4\">\n      <Card.Body>\n        <Card.Title>{title}</Card.Title>\n        <Form onSubmit={onSubmit}>\n          {Object.entries(groupedFields).map(([section, fields]) => (\n            <fieldset key={section} className=\"mb-4\">\n              <legend className=\"fw-bold\">{section}</legend>\n              <Row>\n                {fields.map((field) => (\n                  <Col md={field.fullWidth ? 12 : 6} key={field.name}>\n                    {renderField(field)}\n                  </Col>\n                ))}\n              </Row>\n            </fieldset>\n          ))}\n          {!isReadOnly && (\n            <Button variant=\"primary\" type=\"submit\">\n              {buttonText}\n            </Button>\n          )}\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default ItemForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}