{"ast":null,"code":"var _jsxFileName = \"/Users/jfulbright/bootcamp/Projects/LifeLog/client/src/components/shared/ItemForm.js\";\nimport React from \"react\";\nimport { Form, Button, Card, Row, Col } from \"react-bootstrap\";\nimport { formatCurrency, handleInputChange, isFieldVisible } from \"helpers/operator\";\n\n/**\n * A shared, reusable form component that dynamically renders fields\n * based on a schema definition.\n * Supports: conditional visibility, sections, custom ordering, read-only mode.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ItemForm({\n  schema,\n  formData,\n  setFormData,\n  onSubmit,\n  title = \"Entry\",\n  buttonText = \"Save\"\n}) {\n  const isReadOnly = !setFormData;\n\n  // Detect if we're editing based on key identifying fields\n  const isEditing = !!(formData !== null && formData !== void 0 && formData.id) || !!(formData !== null && formData !== void 0 && formData.title) || !!(formData !== null && formData !== void 0 && formData.make) || !!(formData !== null && formData !== void 0 && formData.artist);\n\n  // 1. Filter and sort visible fields\n  const visibleFields = schema.filter(field => !field.hidden && isFieldVisible(field, formData)).sort((a, b) => (a.order || 0) - (b.order || 0));\n\n  // 2. Group fields by `section` for display layout\n  const groupedFields = visibleFields.reduce((acc, field) => {\n    const section = field.section || \"Main\";\n    if (!acc[section]) acc[section] = [];\n    acc[section].push(field);\n    return acc;\n  }, {});\n\n  // 3. Renders a single form field based on type\n  const renderField = field => {\n    var _formData$field$name;\n    const value = (_formData$field$name = formData[field.name]) !== null && _formData$field$name !== void 0 ? _formData$field$name : \"\";\n\n    // Render read-only links (e.g. Setlist.fm, Photo Link)\n    if (isReadOnly && field.isLink && value) {\n      return /*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: field.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: value,\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            className: \"text-primary text-decoration-underline\",\n            children: value\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, field.name, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Common props for input fields\n    const commonProps = {\n      name: field.name,\n      value,\n      onChange: e => handleInputChange(e, setFormData)\n    };\n\n    // Input element rendering based on type\n    let inputElement;\n    switch (field.type) {\n      case \"select\":\n        inputElement = /*#__PURE__*/_jsxDEV(Form.Select, {\n          ...commonProps,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), field.options.map(opt => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: opt,\n            children: opt\n          }, opt, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this);\n        break;\n      case \"textarea\":\n        inputElement = /*#__PURE__*/_jsxDEV(Form.Control, {\n          as: \"textarea\",\n          rows: 2,\n          ...commonProps\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 24\n        }, this);\n        break;\n      default:\n        inputElement = /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: field.isCurrency ? \"text\" : field.type || \"text\",\n          ...commonProps,\n          value: field.isCurrency ? formatCurrency(value) : value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this);\n        break;\n    }\n\n    // Wrap field with label and optional hint\n    return /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: [field.label, field.optional && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-muted ms-1\",\n          children: \"(optional)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), inputElement]\n    }, field.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 4. Render form layout with sections, columns, and submit button\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"mb-4\",\n    children: /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n        children: isEditing ? `Edit ${title}` : `Add ${title}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: onSubmit,\n        children: [Object.entries(groupedFields).map(([section, fields]) => /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n            className: \"fw-bold\",\n            children: section\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: fields.map(field => /*#__PURE__*/_jsxDEV(Col, {\n              md: field.fullWidth ? 12 : 6,\n              children: renderField(field)\n            }, field.name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 15\n          }, this)]\n        }, section, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this)), !isReadOnly && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: isEditing ? `Update ${buttonText}` : `Add ${buttonText}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_c = ItemForm;\nexport default ItemForm;\nvar _c;\n$RefreshReg$(_c, \"ItemForm\");","map":{"version":3,"names":["React","Form","Button","Card","Row","Col","formatCurrency","handleInputChange","isFieldVisible","jsxDEV","_jsxDEV","ItemForm","schema","formData","setFormData","onSubmit","title","buttonText","isReadOnly","isEditing","id","make","artist","visibleFields","filter","field","hidden","sort","a","b","order","groupedFields","reduce","acc","section","push","renderField","_formData$field$name","value","name","isLink","Group","className","children","Label","label","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","commonProps","onChange","e","inputElement","type","Select","options","map","opt","Control","as","rows","isCurrency","optional","Body","Title","Object","entries","fields","md","fullWidth","variant","_c","$RefreshReg$"],"sources":["/Users/jfulbright/bootcamp/Projects/LifeLog/client/src/components/shared/ItemForm.js"],"sourcesContent":["import React from \"react\";\nimport { Form, Button, Card, Row, Col } from \"react-bootstrap\";\nimport {\n  formatCurrency,\n  handleInputChange,\n  isFieldVisible,\n} from \"helpers/operator\";\n\n/**\n * A shared, reusable form component that dynamically renders fields\n * based on a schema definition.\n * Supports: conditional visibility, sections, custom ordering, read-only mode.\n */\nfunction ItemForm({\n  schema,\n  formData,\n  setFormData,\n  onSubmit,\n  title = \"Entry\",\n  buttonText = \"Save\",\n}) {\n  const isReadOnly = !setFormData;\n\n  // Detect if we're editing based on key identifying fields\n  const isEditing =\n    !!formData?.id ||\n    !!formData?.title ||\n    !!formData?.make ||\n    !!formData?.artist;\n\n  // 1. Filter and sort visible fields\n  const visibleFields = schema\n    .filter((field) => !field.hidden && isFieldVisible(field, formData))\n    .sort((a, b) => (a.order || 0) - (b.order || 0));\n\n  // 2. Group fields by `section` for display layout\n  const groupedFields = visibleFields.reduce((acc, field) => {\n    const section = field.section || \"Main\";\n    if (!acc[section]) acc[section] = [];\n    acc[section].push(field);\n    return acc;\n  }, {});\n\n  // 3. Renders a single form field based on type\n  const renderField = (field) => {\n    const value = formData[field.name] ?? \"\";\n\n    // Render read-only links (e.g. Setlist.fm, Photo Link)\n    if (isReadOnly && field.isLink && value) {\n      return (\n        <Form.Group key={field.name} className=\"mb-3\">\n          <Form.Label>{field.label}</Form.Label>\n          <div>\n            <a\n              href={value}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-primary text-decoration-underline\"\n            >\n              {value}\n            </a>\n          </div>\n        </Form.Group>\n      );\n    }\n\n    // Common props for input fields\n    const commonProps = {\n      name: field.name,\n      value,\n      onChange: (e) => handleInputChange(e, setFormData),\n    };\n\n    // Input element rendering based on type\n    let inputElement;\n    switch (field.type) {\n      case \"select\":\n        inputElement = (\n          <Form.Select {...commonProps}>\n            <option value=\"\">Select</option>\n            {field.options.map((opt) => (\n              <option key={opt} value={opt}>\n                {opt}\n              </option>\n            ))}\n          </Form.Select>\n        );\n        break;\n\n      case \"textarea\":\n        inputElement = <Form.Control as=\"textarea\" rows={2} {...commonProps} />;\n        break;\n\n      default:\n        inputElement = (\n          <Form.Control\n            type={field.isCurrency ? \"text\" : field.type || \"text\"}\n            {...commonProps}\n            value={field.isCurrency ? formatCurrency(value) : value}\n          />\n        );\n        break;\n    }\n\n    // Wrap field with label and optional hint\n    return (\n      <Form.Group key={field.name} className=\"mb-3\">\n        <Form.Label>\n          {field.label}\n          {field.optional && (\n            <span className=\"text-muted ms-1\">(optional)</span>\n          )}\n        </Form.Label>\n        {inputElement}\n      </Form.Group>\n    );\n  };\n\n  // 4. Render form layout with sections, columns, and submit button\n  return (\n    <Card className=\"mb-4\">\n      <Card.Body>\n        <Card.Title>{isEditing ? `Edit ${title}` : `Add ${title}`}</Card.Title>\n        <Form onSubmit={onSubmit}>\n          {Object.entries(groupedFields).map(([section, fields]) => (\n            <fieldset key={section} className=\"mb-4\">\n              <legend className=\"fw-bold\">{section}</legend>\n              <Row>\n                {fields.map((field) => (\n                  <Col md={field.fullWidth ? 12 : 6} key={field.name}>\n                    {renderField(field)}\n                  </Col>\n                ))}\n              </Row>\n            </fieldset>\n          ))}\n\n          {/* Submit button appears only if the form is editable */}\n          {!isReadOnly && (\n            <Button variant=\"primary\" type=\"submit\">\n              {isEditing ? `Update ${buttonText}` : `Add ${buttonText}`}\n            </Button>\n          )}\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default ItemForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}